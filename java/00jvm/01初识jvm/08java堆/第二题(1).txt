1  根据“图一.jpg”知道大对象有三个，且StandManager最大，第三个最小，且最大内存在33.3M， 三者应该是类与子类关系， 

2  根据“图一.jpg”中StandManager#2，和“图二.jpg”、“图三.jpg”得到， 占对象空间的主要东西是segment,

3  根据“图四.jpg”可以得到是大量StandSession占了主要内存空间，导致OOM

4  根据“select s.creationTime from org.apache.catalina.session.StandardSession s”得到StandSession的creationTime，如”图五.jpg”所示；

5  

代码：

var maxTime = 0;
var startTime = 0;
var endTime = 0;
var objArr = toArray(heap.objects("org.apache.catalina.session.StandardSession"));
var size = objArr.length;
for(var i = 0;i<size;i++){
	var num = 0;
	for(var j = i-1;j >= 0;j--){
		if(objArr[i].creationTime - objArr[j].creationTime  < 1000){
			num++;
			
		}
		else{
			if (num >= maxTime){
				maxTime = num;
				startTime = objArr[j].creationTime;
				endTime = objArr[i].creationTime;
			}
			break;
			
		}

	}
}
"the max time is :" + maxTime + ", and  the start time is  :" + startTime + ", the endTime is  :" + endTime;


-------------------自己写-----------------------------------------------
var objArr = toArray(heap.objects("org.apache.catalina.session.StandardSession"));
var maxNum = 0;
var stime = 0;
var etime = 0;
var size = objArr.length;
for(var i = 0;i<size;i++){
	var num = 0;
	var tempEndTime=0;
	for(var j = 0;j<size;j++){
		var diff=objArr[i].creationTime - objArr[j].creationTime;
		if(diff>=0 && diff  <=1000){
		    num++;
           if( objArr[j].creationTime>tempEndTime){
		        tempEndTime=objArr[j].creationTime;
		    }
		}	
	}
	if (num > maxNum){
	   maxNum=num;	
	   stime = objArr[i].creationTime;
	   etime=tempEndTime;
	}
}
"maxNum:"+maxNum+",stime:"+stime+",etime:"+etime;


-------------------自己写2-----------------------------------------------

 var objArr =sort(heap.objects("org.apache.catalina.session.StandardSession"),'lhs.creationTime - rhs.creationTime')
 var size = objArr.length;
 var maxNum=0;
 var stime = 0;
 var etime = 0;
 for(var i = 0;i<size;i++){
     var tempStime=objArr[i].creationTime;
     var num=0;
     for(var j = i;j<size;j++){
	if(objArr[j].creationTime-tempStime<=1000){
	   num++;
	}else{
	   if(num>maxNum){
	       stime=tempStime;
               etime=objArr[j-1].creationTime;
	       maxNum=num;
	   }
	   break;
	}
     }
 }
"maxNum:"+maxNum+",stime:"+stime+",really etime:"+etime+",virtual time:"+(parseInt(stime)+1000);

maxNum:865,stime:1403324651641,really etime:1403324652639,virtual time:1403324652641


-----------------------结束----------------------------------------------
结论：
the max time is :978, and the start time is :1403324651055, the endTime is :1403324652260


var counts={};
max(
    map(
        sort(
            heap.objects("org.apache.catalina.session.StandardSession"),
           'rhs.creationTime - lhs.creationTime'
        ),
       function(session){
         var key = session.creationTime * 1 ;
         if( ! counts[key]){
             counts[key] = 1;
         } else {
             counts[key] = counts[key] + 1;
         }
         var sum = 0;
         for (var i = key ; i < key+1000 ; i++){
             if( counts[i]){ 
                 sum += counts[i]; 
             } 
         }
      return { startTime:session.creationTime,
               endTime:(session.creationTime*1+1000).toString(),
               count:sum};
     }
     ),
'lhs.count > rhs.count')


-----------------------
为什么只输出最后一个
var objArr = toArray(heap.objects("org.apache.catalina.session.StandardSession"));
var size = objArr.length;
for(var i = 0;i<size;i++){
    "creatTime:"+objArr[i].creationTime;
 }
 这个没有严格的定义 他支持js 辅助 但是也只是辅助
